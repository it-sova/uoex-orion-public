//#include ../helpers.oajs
//#include ../config.oajs

function craftTools() {
	["tinkerTool", "pickaxe"].forEach(function (tool) {
		while (Orion.Count(_mining["types"][tool]) < _mining["craftTools"]["minimumTools"]) {
			craft(_mining["types"]["tinkerTool"], _mining["craftTools"]["gumpButtons"][tool]);
			Orion.Wait(2000);
		}
	});
}

function ifFeatureFlagEnabled(flag, func) {
	if (_mining[flag]["enabled"]) {
		func();
	} else {
		print("FeatureFlag for the function " + flag + " is disabled, skipping exection")
	}
}

function checkCaptcha() {
	var gumpCount = Orion.GumpCount();
	if (gumpCount > 0) {
		for (i = 0; i < gumpCount; i++) {
			var gump = Orion.GetGump(i);
			if (Orion.Contains(gump.TextList().join(","), "Enter the letters")) {
				Orion.PlayWav("/orion/orion_client/OA/alarm.wav");
			}
		}
	}
}

function nearestForge() {
	print("Looking for the nearest forge... ", true);
	var forges = {};
	_mining["forges"]["locations"].forEach(function (location) {
		var distance = Orion.GetDistance(location["x"], location["y"]);

		forges[distance] = location;

		print("Range: " + distance + " Location: " +
			" X: " + location["x"] +
			" Y: " + location["y"] +
			" Z: " + location["z"], true);
	});

	const ranges = Object.keys(forges);
	const min = Math.min.apply(Math, ranges);
	print("Ranges: " + Object.keys(forges), true);
	print("Minimum : " + min, true);
	print("Location: " +
		" X: " + forges[min]["x"] +
		" Y: " + forges[min]["y"] +
		" Z: " + forges[min]["z"], true);

	return forges[min];
}

function unload() {
	print("Unloading...", true)
	if (!ensureContainerOpened(Orion.ObjAtLayer("Backpack", Player.Serial()).Serial())) {
		return false;
	}

	if (!ensureContainerOpened(Player.BankSerial(), true)) {
		return false;
	}

	var ingots = Orion.FindType(_mining["types"]["ingot"]);
	ingots.forEach(function (ingot) {
		Orion.MoveItem(ingot, -1, Player.BankSerial());
		Orion.Wait(2000);
	});

	print("Unloaded", true)
}

function start() {
	disclaimer();
	init();
	while (!Player.Dead()) {
		for (var i in _mining["minePoints"]) {
			print("[i] Point " + i);
			Orion.WalkTo(_mining["minePoints"][i]["x"], _mining["minePoints"][i]["y"], _mining["minePoints"][i]["z"], 0);

			for (var x = -_mining["tileOffset"]; x <= _mining["tileOffset"]; x++) {
				for (var y = -_mining["tileOffset"]; y <= _mining["tileOffset"]; y++) {
					var tiles = Orion.GetTiles("cave", Player.X() + x, Player.Y() + y);
					tiles.forEach(function (tile) {
						mine(tile.Graphic(), tile.X(), tile.Y(), tile.Z());
					})
				}
			}
		}
	}
}

function substInList(string, list) {
	var result = false;
	list.forEach(function (element) {
		if (Orion.Contains(string, element)) {
			print("Matched " + element + " to " + string, true);
			result = true;
		}
	});

	return result;
}

function mine(graphic, x, y, z) {
	while (!Player.Dead()) {
		checkCaptcha();
		if (!checkTool()) {
			print("Not enough tools, pausing the script.");
			Orion.PauseScript();
		}

		if (Player.Weight() >= _mining["maxWeight"]) {
			print("W: " + Player.Weight() + " Smelt: " + _mining["maxWeight"] + " Unload: " + _mining["unload"]["unloadWeightLimit"], true);
			const forgeLocation = nearestForge();
			Orion.WalkTo(forgeLocation["x"], forgeLocation["y"], forgeLocation["z"], 1);
			smelt(Player.X(), Player.Y(), Player.Z());
			ifFeatureFlagEnabled("craftTools", craftTools);
			ifFeatureFlagEnabled(function () {
				if (Player.Weight() >= _mining["unload"]["unloadWeightLimit"]) {
					if (!Orion.WalkTo(
						_mining["unload"]["bankLocation"]["x"],
						_mining["unload"]["bankLocation"]["y"],
						_mining["unload"]["bankLocation"]["z"])) {
						print("Failed to reach the bank, pausing the script")
						Orion.PauseScript();
					}
					unload()
					if (!Orion.WalkTo(x, y, z)) {
						print("Failed to reach the spot, pausing the script")
						Orion.PauseScript();
					}
				}
			});
		}
		Orion.WalkTo(x, y, z, 0);
		if (Orion.ValidateTargetTile(graphic, x, y, z)) {
			if (Orion.HaveTarget())
				Orion.CancelWaitTarget();

			Orion.UseType(_mining["types"]["pickaxe"]);
			Orion.WaitJournal("Where do you wish", Orion.Now(), Orion.Now() + 2000, "me|sys");
			Orion.TargetTile(graphic, x, y, z);
			var result = Orion.WaitJournal("You put some|You loosen some|There is no metal|Try mining|is too far|no line of|seen", Orion.Now(), (Orion.Now() + 7000), "me|sys");
			// TODO: Refactor this
			if (result && substInList(result.Text(), _mining["skipTileMessages"])) {
				print("[i] Tile depleted", true);
				Orion.Wait(300);
				break;
			}
		} else {
			print("Tile is not valid", true);
			break;
		}
	}
}
function smelt(x, y, z) {
	print("[i] Smelting");
	var forgeSerial = Orion.FindType(_mining["types"]["forges"].join("|"), -1, "ground", "", _mining["forgeScanDistance"]);
	if (forgeSerial.length > 0) {
		var forge = Orion.FindObject(forgeSerial[0]);
		if (forge) {
			if (Orion.WalkTo(forge.X(), forge.Y(), forge.Z(), 1)) {
				while (Orion.FindType(_mining["types"]["ore"], -1, "backpack").length > 0) {
					var ores = Orion.FindType(_mining["types"]["ore"], -1, "backpack");
					ores.forEach(function (ore) {
						Orion.UseObject(ore);
						Orion.WaitJournal("Select the forge", Orion.Now(), Orion.Now() + 1000, "me|sys");
						Orion.TargetObject(forgeSerial);
						Orion.WaitJournal("You burn away|You smelt", Orion.Now(), Orion.Now() + 1000, "me|sys");
						Orion.Wait(500);
					});
				}
				//Back to spot
				Orion.WalkTo(x, y, z, 0);
			}
		}
	} else {
		print("Failed to find a forge, pausing the script.");
		Orion.PauseScript();
	}
}
function checkTool() {
	var tools = Orion.FindType(_mining["types"]["pickaxe"], -1, "backpack");
	if (tools && tools.length >= 0) {
		return true;
	}

	print("checkTool", "[e] Not enough tools");
	return false;

}

function init() {

	if (Player.WarMode())
		Player.WarMode(false)

	print("Initialization...");
	print("[Unloading] Enabled: " + _mining["unload"]["enabled"])
	print("[CraftTools] Enabled: " + _mining["craftTools"]["enabled"])
}
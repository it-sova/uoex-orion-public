//#include config.oajs
//#include helpers.oajs

function AttackTarget(targetSerial) {
    var targetSerial = targetSerial === undefined ? Orion.TargetSystemSerial() : targetSerial;

    if (Orion.FindObject(targetSerial)) {
        Orion.ShowStatusbar(targetSerial, _attack["statusBar"]["x"], _attack["statusBar"]["y"], false);
        Orion.Attack(targetSerial);
        if (_attack["follow"]) {
            Orion.Follow(targetSerial);
        }
    }
}

function AutoHealSelf() {
    print("Started")
    print("Healing at " + getPercentValue(Player.MaxHits(), _healing["threshold"]) + "HP")
    while (true) {
        while (!Player.Dead() && (Player.Hits() < (getPercentValue(Player.MaxHits(), _healing["threshold"])) || Player.Poisoned())) {
            Orion.Say("[bandself");
            Orion.Wait(100);
            Orion.WaitJournal("You finish|not damaged|heal|barely help", Orion.Now(), Orion.Now() + 20000);

            if (Orion.Count('0x0E21') < 80) {
                charPrint('[' + Orion.Count('0x0E21') + '] bandages left ! ');
            }
        }
        Orion.Wait(500);
    }
}

function ToggleSpell(spellName) {
    print("Started")
    print("Spell: " + spellName)
    while (true) {
        if (!Player.Dead() && Player.Mana() > 5 && !Orion.SpellStatus(spellName)) {
            Orion.Cast(spellName);
            Orion.Wait(500);
        }
        Orion.Wait(100);
    }
}

function ToggleAbility(abilityName) {
    print("Started")
    print("Ability: " + abilityName)
    while (true) {
        if (!Player.Dead() && Player.Mana() > 5 && !Orion.AbilityStatus(abilityName)) {
            Orion.UseAbility(abilityName);
            Orion.Wait(500);
        }
        Orion.Wait(100);
    }
}

function claimAllCorpses() {
    var corpses = Orion.FindType('0x2006', '-1', "ground", 'gray', 10);
    if (corpses && corpses.length > 0) {
        if (Orion.HaveTarget())
            Orion.CancelTarget();

        Orion.WaitJournal("Choose a corpse", Orion.Now(), Orion.Now() + 1000);
        corpses.forEach(function (corpse) {
            if (!Orion.InLOS(corpse)){
                print("Corpse not in LOS, skipping for now", true);
                return;
            }

            if (!Orion.HaveTarget()) {
                Orion.Say("[claim");
                Orion.WaitForTarget(1000);
            }
            Orion.TargetObject(corpse);
            Orion.WaitJournal("Target cannot|You clam|You did|That is|Choose another", Orion.Now(), Orion.Now() + 1000);
            Orion.Wait(500);
        });

    }
    if (Orion.HaveTarget())
        Orion.CancelTarget();

}

function Hide() {
    const alwaysRunOption = Orion.ClientOptionGet("AlwaysRun");
    const blockRunOption = Orion.ClientOptionGet("BlockRunWhileHidden");

    print("Initial alwaysRun -> " + alwaysRunOption + " blockRun -> " + blockRunOption, true);

    Orion.ClientOptionSet("AlwaysRun", 0);
    Orion.ClientOptionSet("BlockRunWhileHidden", 1);

    Orion.PauseScript('all', 'Hide');

    print("Client options has been set, all scripts are paused");

    while (!Player.Hidden()) {
        Orion.WarMode(true);
        Orion.Wait(100);
        Orion.WarMode(false);
        Orion.UseSkill("Hiding")
        Orion.Wait(1000);
    }

    while (Player.Hidden())
        Orion.Wait(500);

    Orion.ResumeScript('all');
    Orion.ClientOptionSet("AlwaysRun", alwaysRunOption);
    Orion.ClientOptionSet("BlockRunWhileHidden", blockRunOption);

    print("Client options has been restored, all paused scripts are now running")
}

function SwapAttacks() {
    if (Orion.ScriptRunning("ToggleAbility")) {
        Orion.ToggleScript("ToggleAbility")
        Orion.Exec("ToggleSpell", true, ["Lightning Strike"])
        charPrint(" >> Now casting Lightning Strike")
        return;
    }

    Orion.ToggleScript("ToggleSpell")
    Orion.Exec("ToggleAbility", true, ["Primary"])
    charPrint(" >> Now casting Secondary weapon ability")
}